version: 2.1
orbs:
  node: circleci/node@5

jobs:
  test-node:
    executor: cimg/node:18.19.0
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Print node install help instructions
          command: |-
            echo "Jest tests have failed"
          when: on_fail
      - run:
          command: npm install jest-junit
      - run:
          name: Run tests
          command: npm run test --ci --runInBand --reporters=default --reporters=jest-junit
      - store_test_results:
          path: ./test-results/

  build-node:
    executor: cimg/node:18.19.0
    environment:
      VERCEL_ORG_ID: $VERCEL_ORG_ID
      VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID
      NEXT_PUBLIC_KAKAO_REST_API_KEY: $NEXT_PUBLIC_KAKAO_REST_API_KEY
    steps:
      - checkout:
          path: ~/myapp
      - run:
          name: Log Current Directory
          command: |
            pwd
      - run:
          name: List all files in the current directory
          command: |
            ls
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Print node install help instructions
          command: |-
            echo "Node build has failed"
          when: on_fail
      - run:
          command: npm run build
      - run:
          name: Create the ~/artifacts directory if it doesn't exist
          command: mkdir -p ~/artifacts
      - run:
          name: Copy artifacts
          command: cp -R build dist public .output .next .docusaurus ~/artifacts 2>/dev/null || true
      - store_artifacts:
          path: ~/artifacts
          destination: node-build

  preview_deployment:
    docker:
      - image: cimg/node:18.19.0
    steps:
      - checkout:
          path: ~/myapp
      - run:
          name: Debug Print
          command: |
            echo "VERCEL_ORG_ID: $VERCEL_ORG_ID"
            echo "VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID"
      - run:
          name: Install Vercel CLI
          command: npm install vercel@latest
      - run:
          name: Pull Vercel Environment Information
          command: npx vercel pull --yes --environment=preview --token=$CIRCLECI_VERCEL_TOKEN_FOR_FOODCOM
      - run:
          name: Build Project Artifacts
          command: npx vercel build --token=$CIRCLECI_VERCEL_TOKEN_FOR_FOODCOM
      - run:
          name: Deploy Project Artifacts to Vercel
          command: npx vercel deploy --prebuilt --token=$CIRCLECI_VERCEL_TOKEN_FOR_FOODCOM

  production_deployment:
    docker:
      - image: cimg/node:18.19.0
    steps:
      - checkout:
          path: ~/myapp
      - run:
          name: Install Vercel CLI
          command: npm install vercel@latest
      - run:
          name: Pull Vercel Environment Information
          command: npx vercel pull --yes --environment=production --token=$CIRCLECI_VERCEL_TOKEN_FOR_FOODCOM
      - run:
          name: Build Project Artifacts
          command: npx vercel build --prod --token=$CIRCLECI_VERCEL_TOKEN_FOR_FOODCOM
      - run:
          name: Deploy Project Artifacts to Vercel
          command: npx vercel deploy --prebuilt --prod --token=$CIRCLECI_VERCEL_TOKEN_FOR_FOODCOM

workflows:
  build-and-test:
    jobs:
      - build-node
      - preview_deployment:
          requires:
            - build-node
          filters:
            branches:
              ignore: /main/
      - production_deployment:
          requires:
            - build-node
          filters:
            branches:
              only: /main/
